### YamlMime:ManagedReference
items:
- uid: Lionk.Auth.Abstraction.IUserService
  commentId: T:Lionk.Auth.Abstraction.IUserService
  id: IUserService
  parent: Lionk.Auth.Abstraction
  children:
  - Lionk.Auth.Abstraction.IUserService.Delete(Lionk.Auth.Identity.User)
  - Lionk.Auth.Abstraction.IUserService.GetRegisteredUser(System.String,System.String)
  - Lionk.Auth.Abstraction.IUserService.GetUserByEmail(System.String)
  - Lionk.Auth.Abstraction.IUserService.GetUserById(System.Guid)
  - Lionk.Auth.Abstraction.IUserService.GetUserByUsername(System.String)
  - Lionk.Auth.Abstraction.IUserService.GetUserSalt(System.String)
  - Lionk.Auth.Abstraction.IUserService.GetUsers
  - Lionk.Auth.Abstraction.IUserService.Insert(Lionk.Auth.Identity.User)
  - Lionk.Auth.Abstraction.IUserService.IsEmailExist(System.String)
  - Lionk.Auth.Abstraction.IUserService.IsFirstUserRegistered
  - Lionk.Auth.Abstraction.IUserService.IsIdExist(System.Guid)
  - Lionk.Auth.Abstraction.IUserService.IsUsernameExist(System.String)
  - Lionk.Auth.Abstraction.IUserService.Update(Lionk.Auth.Identity.User)
  - Lionk.Auth.Abstraction.IUserService.UserRepository
  langs:
  - csharp
  - vb
  name: IUserService
  nameWithType: IUserService
  fullName: Lionk.Auth.Abstraction.IUserService
  type: Interface
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: IUserService
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 9
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Service to manage users.
  example: []
  syntax:
    content: public interface IUserService
    content.vb: Public Interface IUserService
- uid: Lionk.Auth.Abstraction.IUserService.UserRepository
  commentId: P:Lionk.Auth.Abstraction.IUserService.UserRepository
  id: UserRepository
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: UserRepository
  nameWithType: IUserService.UserRepository
  fullName: Lionk.Auth.Abstraction.IUserService.UserRepository
  type: Property
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: UserRepository
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 16
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Gets or sets the user repository.
  example: []
  syntax:
    content: IUserRepository UserRepository { get; set; }
    parameters: []
    return:
      type: Lionk.Auth.Abstraction.IUserRepository
    content.vb: Property UserRepository As IUserRepository
  overload: Lionk.Auth.Abstraction.IUserService.UserRepository*
- uid: Lionk.Auth.Abstraction.IUserService.Delete(Lionk.Auth.Identity.User)
  commentId: M:Lionk.Auth.Abstraction.IUserService.Delete(Lionk.Auth.Identity.User)
  id: Delete(Lionk.Auth.Identity.User)
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: Delete(User)
  nameWithType: IUserService.Delete(User)
  fullName: Lionk.Auth.Abstraction.IUserService.Delete(Lionk.Auth.Identity.User)
  type: Method
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: Delete
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 27
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Method to delete a user.
  example: []
  syntax:
    content: bool Delete(User id)
    parameters:
    - id: id
      type: Lionk.Auth.Identity.User
      description: The user to delete.
    return:
      type: System.Boolean
      description: True if the user was deleted, false otherwise.
    content.vb: Function Delete(id As User) As Boolean
  overload: Lionk.Auth.Abstraction.IUserService.Delete*
- uid: Lionk.Auth.Abstraction.IUserService.GetRegisteredUser(System.String,System.String)
  commentId: M:Lionk.Auth.Abstraction.IUserService.GetRegisteredUser(System.String,System.String)
  id: GetRegisteredUser(System.String,System.String)
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: GetRegisteredUser(string, string)
  nameWithType: IUserService.GetRegisteredUser(string, string)
  fullName: Lionk.Auth.Abstraction.IUserService.GetRegisteredUser(string, string)
  type: Method
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: GetRegisteredUser
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 35
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Method to get a registered user.
  example: []
  syntax:
    content: User? GetRegisteredUser(string username, string passwordHash)
    parameters:
    - id: username
      type: System.String
      description: The username of the user.
    - id: passwordHash
      type: System.String
      description: The hash of the password of the user.
    return:
      type: Lionk.Auth.Identity.User
      description: The registered user.
    content.vb: Function GetRegisteredUser(username As String, passwordHash As String) As User
  overload: Lionk.Auth.Abstraction.IUserService.GetRegisteredUser*
  nameWithType.vb: IUserService.GetRegisteredUser(String, String)
  fullName.vb: Lionk.Auth.Abstraction.IUserService.GetRegisteredUser(String, String)
  name.vb: GetRegisteredUser(String, String)
- uid: Lionk.Auth.Abstraction.IUserService.GetUserByEmail(System.String)
  commentId: M:Lionk.Auth.Abstraction.IUserService.GetUserByEmail(System.String)
  id: GetUserByEmail(System.String)
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: GetUserByEmail(string)
  nameWithType: IUserService.GetUserByEmail(string)
  fullName: Lionk.Auth.Abstraction.IUserService.GetUserByEmail(string)
  type: Method
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: GetUserByEmail
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 42
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Method to get a user by its email.
  example: []
  syntax:
    content: User? GetUserByEmail(string email)
    parameters:
    - id: email
      type: System.String
      description: The email of the user.
    return:
      type: Lionk.Auth.Identity.User
      description: The user with the email, null if not found.
    content.vb: Function GetUserByEmail(email As String) As User
  overload: Lionk.Auth.Abstraction.IUserService.GetUserByEmail*
  nameWithType.vb: IUserService.GetUserByEmail(String)
  fullName.vb: Lionk.Auth.Abstraction.IUserService.GetUserByEmail(String)
  name.vb: GetUserByEmail(String)
- uid: Lionk.Auth.Abstraction.IUserService.GetUserById(System.Guid)
  commentId: M:Lionk.Auth.Abstraction.IUserService.GetUserById(System.Guid)
  id: GetUserById(System.Guid)
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: GetUserById(Guid)
  nameWithType: IUserService.GetUserById(Guid)
  fullName: Lionk.Auth.Abstraction.IUserService.GetUserById(System.Guid)
  type: Method
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: GetUserById
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 49
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Method to get a user by its id.
  example: []
  syntax:
    content: User? GetUserById(Guid id)
    parameters:
    - id: id
      type: System.Guid
      description: The id of the user.
    return:
      type: Lionk.Auth.Identity.User
      description: The user with the id, null if not found.
    content.vb: Function GetUserById(id As Guid) As User
  overload: Lionk.Auth.Abstraction.IUserService.GetUserById*
- uid: Lionk.Auth.Abstraction.IUserService.GetUserByUsername(System.String)
  commentId: M:Lionk.Auth.Abstraction.IUserService.GetUserByUsername(System.String)
  id: GetUserByUsername(System.String)
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: GetUserByUsername(string)
  nameWithType: IUserService.GetUserByUsername(string)
  fullName: Lionk.Auth.Abstraction.IUserService.GetUserByUsername(string)
  type: Method
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: GetUserByUsername
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 56
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Method to get a user by its username.
  example: []
  syntax:
    content: User? GetUserByUsername(string username)
    parameters:
    - id: username
      type: System.String
      description: The username of the user.
    return:
      type: Lionk.Auth.Identity.User
      description: The user with the username, null if not found.
    content.vb: Function GetUserByUsername(username As String) As User
  overload: Lionk.Auth.Abstraction.IUserService.GetUserByUsername*
  nameWithType.vb: IUserService.GetUserByUsername(String)
  fullName.vb: Lionk.Auth.Abstraction.IUserService.GetUserByUsername(String)
  name.vb: GetUserByUsername(String)
- uid: Lionk.Auth.Abstraction.IUserService.GetUsers
  commentId: M:Lionk.Auth.Abstraction.IUserService.GetUsers
  id: GetUsers
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: GetUsers()
  nameWithType: IUserService.GetUsers()
  fullName: Lionk.Auth.Abstraction.IUserService.GetUsers()
  type: Method
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: GetUsers
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 62
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Method to get all the users.
  example: []
  syntax:
    content: HashSet<User> GetUsers()
    return:
      type: System.Collections.Generic.HashSet{Lionk.Auth.Identity.User}
      description: The hashSet of all the users.
    content.vb: Function GetUsers() As HashSet(Of User)
  overload: Lionk.Auth.Abstraction.IUserService.GetUsers*
- uid: Lionk.Auth.Abstraction.IUserService.GetUserSalt(System.String)
  commentId: M:Lionk.Auth.Abstraction.IUserService.GetUserSalt(System.String)
  id: GetUserSalt(System.String)
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: GetUserSalt(string)
  nameWithType: IUserService.GetUserSalt(string)
  fullName: Lionk.Auth.Abstraction.IUserService.GetUserSalt(string)
  type: Method
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: GetUserSalt
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 69
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Method to get the salt of a user.
  example: []
  syntax:
    content: string GetUserSalt(string username)
    parameters:
    - id: username
      type: System.String
      description: The username of the user.
    return:
      type: System.String
      description: The salt of the user.
    content.vb: Function GetUserSalt(username As String) As String
  overload: Lionk.Auth.Abstraction.IUserService.GetUserSalt*
  nameWithType.vb: IUserService.GetUserSalt(String)
  fullName.vb: Lionk.Auth.Abstraction.IUserService.GetUserSalt(String)
  name.vb: GetUserSalt(String)
- uid: Lionk.Auth.Abstraction.IUserService.Insert(Lionk.Auth.Identity.User)
  commentId: M:Lionk.Auth.Abstraction.IUserService.Insert(Lionk.Auth.Identity.User)
  id: Insert(Lionk.Auth.Identity.User)
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: Insert(User)
  nameWithType: IUserService.Insert(User)
  fullName: Lionk.Auth.Abstraction.IUserService.Insert(Lionk.Auth.Identity.User)
  type: Method
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: Insert
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 76
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Method to insert a user.
  example: []
  syntax:
    content: User? Insert(User user)
    parameters:
    - id: user
      type: Lionk.Auth.Identity.User
      description: The user to insert.
    return:
      type: Lionk.Auth.Identity.User
      description: The inserted user, null the insertion failed.
    content.vb: Function Insert(user As User) As User
  overload: Lionk.Auth.Abstraction.IUserService.Insert*
- uid: Lionk.Auth.Abstraction.IUserService.IsEmailExist(System.String)
  commentId: M:Lionk.Auth.Abstraction.IUserService.IsEmailExist(System.String)
  id: IsEmailExist(System.String)
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: IsEmailExist(string)
  nameWithType: IUserService.IsEmailExist(string)
  fullName: Lionk.Auth.Abstraction.IUserService.IsEmailExist(string)
  type: Method
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: IsEmailExist
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 83
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Method to check if a username exists.
  example: []
  syntax:
    content: bool IsEmailExist(string email)
    parameters:
    - id: email
      type: System.String
      description: The user to check.
    return:
      type: System.Boolean
      description: True if the username exists, false otherwise.
    content.vb: Function IsEmailExist(email As String) As Boolean
  overload: Lionk.Auth.Abstraction.IUserService.IsEmailExist*
  nameWithType.vb: IUserService.IsEmailExist(String)
  fullName.vb: Lionk.Auth.Abstraction.IUserService.IsEmailExist(String)
  name.vb: IsEmailExist(String)
- uid: Lionk.Auth.Abstraction.IUserService.IsIdExist(System.Guid)
  commentId: M:Lionk.Auth.Abstraction.IUserService.IsIdExist(System.Guid)
  id: IsIdExist(System.Guid)
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: IsIdExist(Guid)
  nameWithType: IUserService.IsIdExist(Guid)
  fullName: Lionk.Auth.Abstraction.IUserService.IsIdExist(System.Guid)
  type: Method
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: IsIdExist
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 90
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Method to check if an id exists.
  example: []
  syntax:
    content: bool IsIdExist(Guid id)
    parameters:
    - id: id
      type: System.Guid
      description: The user to check.
    return:
      type: System.Boolean
      description: True if the id exists, false otherwise.
    content.vb: Function IsIdExist(id As Guid) As Boolean
  overload: Lionk.Auth.Abstraction.IUserService.IsIdExist*
- uid: Lionk.Auth.Abstraction.IUserService.IsUsernameExist(System.String)
  commentId: M:Lionk.Auth.Abstraction.IUserService.IsUsernameExist(System.String)
  id: IsUsernameExist(System.String)
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: IsUsernameExist(string)
  nameWithType: IUserService.IsUsernameExist(string)
  fullName: Lionk.Auth.Abstraction.IUserService.IsUsernameExist(string)
  type: Method
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: IsUsernameExist
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 97
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Method to check if a username exists.
  example: []
  syntax:
    content: bool IsUsernameExist(string username)
    parameters:
    - id: username
      type: System.String
      description: The user to check.
    return:
      type: System.Boolean
      description: True if the username exists, false otherwise.
    content.vb: Function IsUsernameExist(username As String) As Boolean
  overload: Lionk.Auth.Abstraction.IUserService.IsUsernameExist*
  nameWithType.vb: IUserService.IsUsernameExist(String)
  fullName.vb: Lionk.Auth.Abstraction.IUserService.IsUsernameExist(String)
  name.vb: IsUsernameExist(String)
- uid: Lionk.Auth.Abstraction.IUserService.IsFirstUserRegistered
  commentId: M:Lionk.Auth.Abstraction.IUserService.IsFirstUserRegistered
  id: IsFirstUserRegistered
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: IsFirstUserRegistered()
  nameWithType: IUserService.IsFirstUserRegistered()
  fullName: Lionk.Auth.Abstraction.IUserService.IsFirstUserRegistered()
  type: Method
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: IsFirstUserRegistered
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 104
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: >-
    Method to check if the current user being registered is the first user in the system.

    If true, this indicates that the user should be assigned the Admin role.
  example: []
  syntax:
    content: bool IsFirstUserRegistered()
    return:
      type: System.Boolean
      description: True if the current user is the first to be registered, false otherwise.
    content.vb: Function IsFirstUserRegistered() As Boolean
  overload: Lionk.Auth.Abstraction.IUserService.IsFirstUserRegistered*
- uid: Lionk.Auth.Abstraction.IUserService.Update(Lionk.Auth.Identity.User)
  commentId: M:Lionk.Auth.Abstraction.IUserService.Update(Lionk.Auth.Identity.User)
  id: Update(Lionk.Auth.Identity.User)
  parent: Lionk.Auth.Abstraction.IUserService
  langs:
  - csharp
  - vb
  name: Update(User)
  nameWithType: IUserService.Update(User)
  fullName: Lionk.Auth.Abstraction.IUserService.Update(Lionk.Auth.Identity.User)
  type: Method
  source:
    remote:
      path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
      branch: api-documentation
      repo: git@github.com:Lionk-Framework/Lionk.git
    id: Update
    path: src/Lib/Lionk.Auth/Model/Abstraction/IUserService.cs
    startLine: 111
  assemblies:
  - Lionk.Auth
  namespace: Lionk.Auth.Abstraction
  summary: Method to update a user.
  example: []
  syntax:
    content: User? Update(User user)
    parameters:
    - id: user
      type: Lionk.Auth.Identity.User
      description: The user to update.
    return:
      type: Lionk.Auth.Identity.User
      description: The updated user, null if the update failed.
    content.vb: Function Update(user As User) As User
  overload: Lionk.Auth.Abstraction.IUserService.Update*
references:
- uid: Lionk.Auth.Abstraction
  commentId: N:Lionk.Auth.Abstraction
  href: Lionk.html
  name: Lionk.Auth.Abstraction
  nameWithType: Lionk.Auth.Abstraction
  fullName: Lionk.Auth.Abstraction
  spec.csharp:
  - uid: Lionk
    name: Lionk
    href: Lionk.html
  - name: .
  - uid: Lionk.Auth
    name: Auth
    href: Lionk.Auth.html
  - name: .
  - uid: Lionk.Auth.Abstraction
    name: Abstraction
    href: Lionk.Auth.Abstraction.html
  spec.vb:
  - uid: Lionk
    name: Lionk
    href: Lionk.html
  - name: .
  - uid: Lionk.Auth
    name: Auth
    href: Lionk.Auth.html
  - name: .
  - uid: Lionk.Auth.Abstraction
    name: Abstraction
    href: Lionk.Auth.Abstraction.html
- uid: Lionk.Auth.Abstraction.IUserService.UserRepository*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.UserRepository
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_UserRepository
  name: UserRepository
  nameWithType: IUserService.UserRepository
  fullName: Lionk.Auth.Abstraction.IUserService.UserRepository
- uid: Lionk.Auth.Abstraction.IUserRepository
  commentId: T:Lionk.Auth.Abstraction.IUserRepository
  parent: Lionk.Auth.Abstraction
  href: Lionk.Auth.Abstraction.IUserRepository.html
  name: IUserRepository
  nameWithType: IUserRepository
  fullName: Lionk.Auth.Abstraction.IUserRepository
- uid: Lionk.Auth.Abstraction.IUserService.Delete*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.Delete
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_Delete_Lionk_Auth_Identity_User_
  name: Delete
  nameWithType: IUserService.Delete
  fullName: Lionk.Auth.Abstraction.IUserService.Delete
- uid: Lionk.Auth.Identity.User
  commentId: T:Lionk.Auth.Identity.User
  parent: Lionk.Auth.Identity
  href: Lionk.Auth.Identity.User.html
  name: User
  nameWithType: User
  fullName: Lionk.Auth.Identity.User
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Lionk.Auth.Identity
  commentId: N:Lionk.Auth.Identity
  href: Lionk.html
  name: Lionk.Auth.Identity
  nameWithType: Lionk.Auth.Identity
  fullName: Lionk.Auth.Identity
  spec.csharp:
  - uid: Lionk
    name: Lionk
    href: Lionk.html
  - name: .
  - uid: Lionk.Auth
    name: Auth
    href: Lionk.Auth.html
  - name: .
  - uid: Lionk.Auth.Identity
    name: Identity
    href: Lionk.Auth.Identity.html
  spec.vb:
  - uid: Lionk
    name: Lionk
    href: Lionk.html
  - name: .
  - uid: Lionk.Auth
    name: Auth
    href: Lionk.Auth.html
  - name: .
  - uid: Lionk.Auth.Identity
    name: Identity
    href: Lionk.Auth.Identity.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Lionk.Auth.Abstraction.IUserService.GetRegisteredUser*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.GetRegisteredUser
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_GetRegisteredUser_System_String_System_String_
  name: GetRegisteredUser
  nameWithType: IUserService.GetRegisteredUser
  fullName: Lionk.Auth.Abstraction.IUserService.GetRegisteredUser
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Lionk.Auth.Abstraction.IUserService.GetUserByEmail*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.GetUserByEmail
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_GetUserByEmail_System_String_
  name: GetUserByEmail
  nameWithType: IUserService.GetUserByEmail
  fullName: Lionk.Auth.Abstraction.IUserService.GetUserByEmail
- uid: Lionk.Auth.Abstraction.IUserService.GetUserById*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.GetUserById
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_GetUserById_System_Guid_
  name: GetUserById
  nameWithType: IUserService.GetUserById
  fullName: Lionk.Auth.Abstraction.IUserService.GetUserById
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Lionk.Auth.Abstraction.IUserService.GetUserByUsername*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.GetUserByUsername
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_GetUserByUsername_System_String_
  name: GetUserByUsername
  nameWithType: IUserService.GetUserByUsername
  fullName: Lionk.Auth.Abstraction.IUserService.GetUserByUsername
- uid: Lionk.Auth.Abstraction.IUserService.GetUsers*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.GetUsers
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_GetUsers
  name: GetUsers
  nameWithType: IUserService.GetUsers
  fullName: Lionk.Auth.Abstraction.IUserService.GetUsers
- uid: System.Collections.Generic.HashSet{Lionk.Auth.Identity.User}
  commentId: T:System.Collections.Generic.HashSet{Lionk.Auth.Identity.User}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<User>
  nameWithType: HashSet<User>
  fullName: System.Collections.Generic.HashSet<Lionk.Auth.Identity.User>
  nameWithType.vb: HashSet(Of User)
  fullName.vb: System.Collections.Generic.HashSet(Of Lionk.Auth.Identity.User)
  name.vb: HashSet(Of User)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - uid: Lionk.Auth.Identity.User
    name: User
    href: Lionk.Auth.Identity.User.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - uid: Lionk.Auth.Identity.User
    name: User
    href: Lionk.Auth.Identity.User.html
  - name: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Lionk.Auth.Abstraction.IUserService.GetUserSalt*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.GetUserSalt
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_GetUserSalt_System_String_
  name: GetUserSalt
  nameWithType: IUserService.GetUserSalt
  fullName: Lionk.Auth.Abstraction.IUserService.GetUserSalt
- uid: Lionk.Auth.Abstraction.IUserService.Insert*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.Insert
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_Insert_Lionk_Auth_Identity_User_
  name: Insert
  nameWithType: IUserService.Insert
  fullName: Lionk.Auth.Abstraction.IUserService.Insert
- uid: Lionk.Auth.Abstraction.IUserService.IsEmailExist*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.IsEmailExist
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_IsEmailExist_System_String_
  name: IsEmailExist
  nameWithType: IUserService.IsEmailExist
  fullName: Lionk.Auth.Abstraction.IUserService.IsEmailExist
- uid: Lionk.Auth.Abstraction.IUserService.IsIdExist*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.IsIdExist
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_IsIdExist_System_Guid_
  name: IsIdExist
  nameWithType: IUserService.IsIdExist
  fullName: Lionk.Auth.Abstraction.IUserService.IsIdExist
- uid: Lionk.Auth.Abstraction.IUserService.IsUsernameExist*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.IsUsernameExist
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_IsUsernameExist_System_String_
  name: IsUsernameExist
  nameWithType: IUserService.IsUsernameExist
  fullName: Lionk.Auth.Abstraction.IUserService.IsUsernameExist
- uid: Lionk.Auth.Abstraction.IUserService.IsFirstUserRegistered*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.IsFirstUserRegistered
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_IsFirstUserRegistered
  name: IsFirstUserRegistered
  nameWithType: IUserService.IsFirstUserRegistered
  fullName: Lionk.Auth.Abstraction.IUserService.IsFirstUserRegistered
- uid: Lionk.Auth.Abstraction.IUserService.Update*
  commentId: Overload:Lionk.Auth.Abstraction.IUserService.Update
  href: Lionk.Auth.Abstraction.IUserService.html#Lionk_Auth_Abstraction_IUserService_Update_Lionk_Auth_Identity_User_
  name: Update
  nameWithType: IUserService.Update
  fullName: Lionk.Auth.Abstraction.IUserService.Update
